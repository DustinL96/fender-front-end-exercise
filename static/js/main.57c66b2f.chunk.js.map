{"version":3,"sources":["resources/FenderLogo.svg","managers/ProductManager.ts","store/products/productActions.ts","store/products/productTypes.ts","defs/Colors.ts","components/ProductFilter.tsx","components/ProductImage.tsx","components/ProductGrid.tsx","defs/routerPaths.ts","screens/ProductsScreen.tsx","components/IndividualProduct.tsx","screens/IndividualItemScreen.tsx","components/Header.tsx","components/Footer.tsx","components/Router.tsx","App.tsx","serviceWorker.ts","store/products/productReducer.ts","store/reducers.ts","store/configureStore.ts","index.tsx"],"names":["module","exports","ProductManager","products","productSeries","productTypes","this","documents","product","undefined","productType","push","series","filter","length","indexOf","productNo","find","setSelectedProduct","type","Colors","font","boxShadow","background","border","brokenImage","FilterContainer","styled","div","props","visibility","width","FilterTitleContainer","Title","Typography","ClickableText","FilterCheckbox","Checkbox","FilterOption","FormControlLabel","mapDispatchToProps","toggleProductSeries","toggle","toggleProductType","clearSeriesFilters","clearTypesFilters","clearAllFilters","connect","selectedProductSeries","selectedProductTypes","drawer","onClick","Divider","variant","Object","keys","getProductSeries","sort","map","index","key","control","checked","onChange","event","label","getProductTypes","ImageContainer","BrokenImage","BrokenImageOutlined","ProductImage","useState","showError","setShowError","fontSize","height","src","alt","onError","ProductGridContainer","ProductContainer","getDisplayedProducts","setNextScreen","replace","images","productDisplayName_en","productSubType","align","ScreenContainer","nextScreen","useEffect","to","screen","ProductTitle","ProductInfoContainer","ProductInfoColumn","ProductInfoTitle","selectedProduct","brand","inStock_US_CONSUMER","BackButton","IconButton","console","log","getIndividualProduct","match","params","screenName","ArrowBackIos","HeaderContainer","Icon","ExitButton","ProductFilterContainer","TextLink","Link","isFilterDrawerOpen","setIsFilterDrawerOpen","FenderLogo","Menu","Drawer","anchor","open","onClose","Close","FooterContainer","Footer","href","target","PageContainer","Router","basename","path","exact","component","ProductsScreen","IndividualItemScreen","App","Boolean","window","location","hostname","DEFAULT_PRODUCT_STORE","productReducer","state","action","typeIndex","slice","seriesIndex","rootReducer","combineReducers","configureStore","store","createStore","applyMiddleware","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.57c66b2f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/FenderLogo.d12f0c8c.svg\";","import { IProduct } from \"../defs/Product\";\r\nimport { documents } from \"../resources/products.json\";\r\n\r\ninterface IProductDict {\r\n    [key: string]: IProduct[];\r\n}\r\n\r\nclass _ProductManager {\r\n    private products: IProduct[];\r\n    private readonly productSeries: IProductDict;\r\n    private readonly productTypes: IProductDict;\r\n\r\n    constructor(products: IProduct[]) {\r\n        this.products = products;\r\n        this.productSeries = {};\r\n        this.productTypes = {};\r\n\r\n        for (const product of documents) {\r\n            if (this.productTypes[product.productType] === undefined) {\r\n                this.productTypes[product.productType] = [product];\r\n            } else {\r\n                this.productTypes[product.productType].push(product);\r\n            }\r\n\r\n            if (this.productSeries[product.series] === undefined) {\r\n                this.productSeries[product.series] = [product];\r\n            } else {\r\n                this.productSeries[product.series].push(product);\r\n            }\r\n        }\r\n    }\r\n\r\n    getDisplayedProducts(productSeries: string[] = [], productTypes: string[] = []): IProduct[] {\r\n        return this.products.filter(\r\n            (product: IProduct): boolean =>\r\n                (productSeries.length === 0 || productSeries.indexOf(product.series) !== -1) &&\r\n                (productTypes.length === 0 || productTypes.indexOf(product.productType) !== -1),\r\n        );\r\n    }\r\n\r\n    getIndividualProduct(productNo: string): IProduct | undefined {\r\n        return this.products.find((product: IProduct): boolean => product.productNo === productNo);\r\n    }\r\n\r\n    getProductTypes(): IProductDict {\r\n        return this.productTypes;\r\n    }\r\n\r\n    getProductSeries(): IProductDict {\r\n        return this.productSeries;\r\n    }\r\n}\r\n\r\nconst ProductManager = new _ProductManager(documents);\r\nexport { ProductManager };\r\n","import {\r\n    CLEAR_ALL_FILTERS,\r\n    CLEAR_PRODUCT_SERIES_FILTERS,\r\n    CLEAR_PRODUCT_TYPE_FILTERS,\r\n    IClearAllFilters,\r\n    IClearProductSeriesFilters,\r\n    IClearProductTypeFilters,\r\n    ISetSelectedProduct,\r\n    IToggleProductSeriesAction,\r\n    IToggleProductTypeAction,\r\n    SET_SELECTED_PRODUCT,\r\n    TOGGLE_PRODUCT_SERIES,\r\n    TOGGLE_PRODUCT_TYPE,\r\n} from \"./productTypes\";\r\nimport { IProduct } from \"../../defs/Product\";\r\n\r\nexport function toggleProductSeries(productSeries: string, toggle: boolean): IToggleProductSeriesAction {\r\n    return { type: TOGGLE_PRODUCT_SERIES, productSeries, toggle };\r\n}\r\n\r\nexport function toggleProductType(productType: string, toggle: boolean): IToggleProductTypeAction {\r\n    return { type: TOGGLE_PRODUCT_TYPE, productType, toggle };\r\n}\r\n\r\nexport function setSelectedProduct(product: IProduct | null): ISetSelectedProduct {\r\n    return { type: SET_SELECTED_PRODUCT, product };\r\n}\r\n\r\nexport function clearSeriesFilters(): IClearProductSeriesFilters {\r\n    return { type: CLEAR_PRODUCT_SERIES_FILTERS };\r\n}\r\nexport function clearTypesFilters(): IClearProductTypeFilters {\r\n    return { type: CLEAR_PRODUCT_TYPE_FILTERS };\r\n}\r\nexport function clearAllFilters(): IClearAllFilters {\r\n    return { type: CLEAR_ALL_FILTERS };\r\n}\r\n","import { Action } from \"redux\";\r\nimport { IProduct } from \"../../defs/Product\";\r\n\r\nexport const TOGGLE_PRODUCT_SERIES = \"TOGGLE_PRODUCT_SERIES\";\r\nexport const TOGGLE_PRODUCT_TYPE = \"TOGGLE_PRODUCT_TYPE\";\r\nexport const SET_SELECTED_PRODUCT = \"SET_SELECTED_PRODUCT\";\r\nexport const CLEAR_PRODUCT_SERIES_FILTERS = \"CLEAR_PRODUCT_SERIES_FILTERS\";\r\nexport const CLEAR_PRODUCT_TYPE_FILTERS = \"CLEAR_PRODUCT_TYPE_FILTERS\";\r\nexport const CLEAR_ALL_FILTERS = \"CLEAR_ALL_FILTERS\";\r\n\r\nexport interface IToggleProductSeriesAction extends Action<typeof TOGGLE_PRODUCT_SERIES> {\r\n    productSeries: string;\r\n    toggle: boolean;\r\n}\r\n\r\nexport interface IToggleProductTypeAction extends Action<typeof TOGGLE_PRODUCT_TYPE> {\r\n    productType: string;\r\n    toggle: boolean;\r\n}\r\n\r\nexport interface ISetSelectedProduct extends Action<typeof SET_SELECTED_PRODUCT> {\r\n    product: IProduct | null;\r\n}\r\n\r\nexport interface IClearProductSeriesFilters extends Action<typeof CLEAR_PRODUCT_SERIES_FILTERS> {}\r\nexport interface IClearProductTypeFilters extends Action<typeof CLEAR_PRODUCT_TYPE_FILTERS> {}\r\nexport interface IClearAllFilters extends Action<typeof CLEAR_ALL_FILTERS> {}\r\n\r\nexport type TGenericProductsAction =\r\n    | IToggleProductSeriesAction\r\n    | IToggleProductTypeAction\r\n    | ISetSelectedProduct\r\n    | IClearProductSeriesFilters\r\n    | IClearProductTypeFilters\r\n    | IClearAllFilters;\r\n","export const Colors = {\r\n    primary: \"#FF0000\",\r\n    header: {\r\n        font: \"#FFFFFF\",\r\n        boxShadow: \"#0000001A\",\r\n    },\r\n    footer: {\r\n        background: \"#F9F9F9\",\r\n        border: \"#A9A9A9\",\r\n    },\r\n    images: {\r\n        brokenImage: \"#A9A9A9\",\r\n        border: \"#D3D3D3\",\r\n    },\r\n};\r\n","import { Checkbox, Divider, FormControlLabel, Typography } from \"@material-ui/core\";\r\nimport { ProductManager } from \"../managers/ProductManager\";\r\nimport React, { ChangeEvent } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n    clearAllFilters,\r\n    clearSeriesFilters,\r\n    clearTypesFilters,\r\n    toggleProductSeries,\r\n    toggleProductType,\r\n} from \"../store/products/productActions\";\r\nimport { connect } from \"react-redux\";\r\nimport IState from \"../store/state\";\r\nimport { Colors } from \"../defs/Colors\";\r\n\r\ninterface IFilterContainer {\r\n    visibility: string;\r\n    width: string | number;\r\n}\r\n\r\nconst FilterContainer = styled.div`\r\n    width: 20vw;\r\n    padding: 15px 1vw;\r\n    display: flex;\r\n    flex-direction: column;\r\n    @media only screen and (max-width: 1315px) {\r\n        visibility: ${(props: IFilterContainer): string => props.visibility};\r\n        width: ${(props: IFilterContainer): string | number => props.width};\r\n        padding: 0;\r\n    }\r\n`;\r\n\r\nconst FilterTitleContainer = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-content: center;\r\n`;\r\n\r\nconst Title = styled(Typography)`\r\n    && {\r\n        margin-top: 5px;\r\n        margin-left: 5px;\r\n    }\r\n`;\r\n\r\nconst ClickableText = styled(Typography)`\r\n    && {\r\n        color: #61dafb;\r\n        margin-top: 5px;\r\n        &:hover {\r\n            cursor: pointer;\r\n        }\r\n    }\r\n`;\r\n\r\nconst FilterCheckbox = styled(Checkbox)`\r\n    && {\r\n        &.MuiCheckbox-colorSecondary.Mui-checked {\r\n            color: ${Colors.primary};\r\n        }\r\n    }\r\n`;\r\n\r\nconst FilterOption = styled(FormControlLabel)`\r\n    && {\r\n        margin-left: 5px;\r\n        .MuiTypography-body1 {\r\n            overflow: hidden;\r\n            white-space: nowrap;\r\n            text-overflow: ellipsis;\r\n        }\r\n    }\r\n`;\r\n\r\ninterface IProductFilterOwnProps {\r\n    drawer?: boolean;\r\n}\r\n\r\ninterface IProductFilterReduxProps {\r\n    selectedProductSeries: string[];\r\n    selectedProductTypes: string[];\r\n}\r\n\r\ninterface IProductFilterDispatchProps {\r\n    toggleProductSeries: (series: string, toggle: boolean) => void;\r\n    toggleProductType: (type: string, toggle: boolean) => void;\r\n    clearSeriesFilters: () => void;\r\n    clearTypesFilters: () => void;\r\n    clearAllFilters: () => void;\r\n}\r\n\r\ntype TProductFilterAllProps = IProductFilterOwnProps & IProductFilterReduxProps & IProductFilterDispatchProps;\r\n\r\nfunction ProductFilter(props: TProductFilterAllProps): JSX.Element {\r\n    return (\r\n        <FilterContainer visibility={props.drawer ? \"visible\" : \"collapse\"} width={props.drawer ? \"auto\" : 0}>\r\n            <FilterTitleContainer>\r\n                <Title>Filters</Title>\r\n                {(props.selectedProductTypes.length !== 0 || props.selectedProductSeries.length !== 0) && (\r\n                    <ClickableText onClick={props.clearAllFilters}>Clear</ClickableText>\r\n                )}\r\n            </FilterTitleContainer>\r\n            <Divider />\r\n            <FilterTitleContainer>\r\n                <Title variant=\"subtitle1\">Product Series</Title>\r\n                {props.selectedProductSeries.length !== 0 && (\r\n                    <ClickableText onClick={props.clearSeriesFilters}>Clear</ClickableText>\r\n                )}\r\n            </FilterTitleContainer>\r\n            <Divider />\r\n            {Object.keys(ProductManager.getProductSeries())\r\n                .sort()\r\n                .map((series: string, index: number) => (\r\n                    <FilterOption\r\n                        key={index + series}\r\n                        control={\r\n                            <FilterCheckbox\r\n                                checked={props.selectedProductSeries.indexOf(series) !== -1}\r\n                                onChange={(event: ChangeEvent<HTMLInputElement>, checked: boolean): void =>\r\n                                    props.toggleProductSeries(series, checked)\r\n                                }\r\n                            />\r\n                        }\r\n                        label={series + \" (\" + ProductManager.getProductSeries()[series].length + \")\"}\r\n                    />\r\n                ))}\r\n            <FilterTitleContainer>\r\n                <Title variant=\"subtitle1\">Product Type</Title>\r\n                {props.selectedProductTypes.length !== 0 && (\r\n                    <ClickableText onClick={props.clearTypesFilters}>Clear</ClickableText>\r\n                )}\r\n            </FilterTitleContainer>\r\n            <Divider />\r\n            {Object.keys(ProductManager.getProductTypes())\r\n                .sort()\r\n                .map((type: string, index: number) => (\r\n                    <FilterOption\r\n                        key={index + type}\r\n                        control={\r\n                            <FilterCheckbox\r\n                                checked={props.selectedProductTypes.indexOf(type) !== -1}\r\n                                onChange={(event: ChangeEvent<HTMLInputElement>, checked: boolean): void =>\r\n                                    props.toggleProductType(type, checked)\r\n                                }\r\n                            />\r\n                        }\r\n                        label={type + \" (\" + ProductManager.getProductTypes()[type].length + \")\"}\r\n                    />\r\n                ))}\r\n        </FilterContainer>\r\n    );\r\n}\r\nconst mapStateToProps = ({ product }: IState): IProductFilterReduxProps => ({\r\n    selectedProductSeries: product.selectedProductSeries,\r\n    selectedProductTypes: product.selectedProductTypes,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    toggleProductSeries,\r\n    toggleProductType,\r\n    clearSeriesFilters,\r\n    clearTypesFilters,\r\n    clearAllFilters,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductFilter);\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { BrokenImageOutlined } from \"@material-ui/icons\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { Colors } from \"../defs/Colors\";\r\n\r\nconst ImageContainer = styled.div`\r\n    width: 300px;\r\n    height: 400px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border: 1px solid ${Colors.images.border};\r\n    border-radius: 6px;\r\n`;\r\n\r\nconst BrokenImage = styled(BrokenImageOutlined)`\r\n    && {\r\n        color: ${Colors.images.brokenImage};\r\n        margin-bottom: 5px;\r\n    }\r\n`;\r\n\r\ninterface IProductImage {\r\n    src: string | undefined;\r\n    alt: string | undefined;\r\n}\r\n\r\nexport default function ProductImage(props: IProductImage): JSX.Element {\r\n    const [showError, setShowError] = useState<boolean>(false);\r\n\r\n    return (\r\n        <ImageContainer>\r\n            {showError ? (\r\n                <>\r\n                    <BrokenImage fontSize=\"large\" />\r\n                    <Typography variant=\"body2\">Image Failed To Load</Typography>\r\n                </>\r\n            ) : (\r\n                <img\r\n                    width={300}\r\n                    height={200}\r\n                    src={props.src}\r\n                    alt={props.alt}\r\n                    onError={(): void => setShowError(true)}\r\n                />\r\n            )}\r\n        </ImageContainer>\r\n    );\r\n}\r\n","import { ProductManager } from \"../managers/ProductManager\";\r\nimport { IProduct } from \"../defs/Product\";\r\nimport ProductImage from \"./ProductImage\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport IState from \"../store/state\";\r\nimport { connect } from \"react-redux\";\r\nimport { INDIVIDUAL_ITEM } from \"../defs/routerPaths\";\r\n\r\nconst ProductGridContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    justify-content: flex-start;\r\n    width: 80vw;\r\n    padding: 15px 0;\r\n    @media only screen and (max-width: 1315px) {\r\n        width: 100vw;\r\n        justify-content: space-evenly;\r\n    }\r\n`;\r\n\r\nconst ProductContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 300px;\r\n    height: 450px;\r\n    margin-bottom: 50px;\r\n    margin-left: 25px;\r\n    &:hover {\r\n        cursor: pointer;\r\n    }\r\n    @media only screen and (max-width: 1315px) {\r\n        margin: 0;\r\n    }\r\n`;\r\n\r\ninterface IProductGridOwnProps {\r\n    setNextScreen: (screen: string) => void;\r\n}\r\n\r\ninterface IProductGridReduxProps {\r\n    selectedProductSeries: string[];\r\n    selectedProductTypes: string[];\r\n}\r\n\r\nfunction ProductGrid(props: IProductGridOwnProps & IProductGridReduxProps): JSX.Element {\r\n    return (\r\n        <ProductGridContainer>\r\n            {ProductManager.getDisplayedProducts(props.selectedProductSeries, props.selectedProductTypes).map(\r\n                (product: IProduct, index: number) => (\r\n                    <ProductContainer\r\n                        key={index + product.productNo}\r\n                        onClick={(): void =>\r\n                            props.setNextScreen(INDIVIDUAL_ITEM.replace(\":productNo\", product.productNo))\r\n                        }\r\n                    >\r\n                        <ProductImage\r\n                            src={product.images[0]}\r\n                            alt={product.productDisplayName_en || product.productSubType}\r\n                        />\r\n                        <Typography variant=\"body1\" align=\"center\">\r\n                            {product.productDisplayName_en || product.productSubType}\r\n                        </Typography>\r\n                    </ProductContainer>\r\n                ),\r\n            )}\r\n        </ProductGridContainer>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ({ product }: IState): IProductGridReduxProps => ({\r\n    selectedProductSeries: product.selectedProductSeries,\r\n    selectedProductTypes: product.selectedProductTypes,\r\n});\r\n\r\nexport default connect(mapStateToProps)(ProductGrid);\r\n","export const PRODUCTS = \"/\";\r\nexport const INDIVIDUAL_ITEM = \"/product/:productNo\";\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport ProductFilter from \"../components/ProductFilter\";\r\nimport ProductGrid from \"../components/ProductGrid\";\r\nimport { IProduct } from \"../defs/Product\";\r\nimport { setSelectedProduct } from \"../store/products/productActions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst ScreenContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 100%;\r\n    max-width: 1350px;\r\n`;\r\n\r\ninterface IProductsScreenDispatchprops {\r\n    setSelectedProduct: (product: IProduct | null) => void;\r\n}\r\n\r\nfunction ProductsScreen(props: IProductsScreenDispatchprops): JSX.Element {\r\n    const [nextScreen, setNextScreen] = useState<string | null>(null);\r\n\r\n    const clearSelectedProduct = (): void => {\r\n        props.setSelectedProduct(null);\r\n    };\r\n    useEffect(clearSelectedProduct, []);\r\n\r\n    if (nextScreen) {\r\n        return <Redirect push to={nextScreen} />;\r\n    }\r\n\r\n    return (\r\n        <ScreenContainer>\r\n            <ProductFilter />\r\n            <ProductGrid setNextScreen={(screen: string): void => setNextScreen(screen)} />\r\n        </ScreenContainer>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    setSelectedProduct,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ProductsScreen);\r\n","import ProductImage from \"./ProductImage\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { IProduct } from \"../defs/Product\";\r\nimport styled from \"styled-components\";\r\nimport IState from \"../store/state\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst ProductContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 1vw;\r\n`;\r\n\r\nconst ProductTitle = styled(Typography)`\r\n    && {\r\n        margin-bottom: 15px;\r\n    }\r\n`;\r\n\r\nconst ProductInfoContainer = styled.div`\r\n    display: flex;\r\n    margin-top: 10px;\r\n`;\r\n\r\nconst ProductInfoColumn = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-left: 10px;\r\n`;\r\n\r\nconst ProductInfoTitle = styled(Typography)`\r\n    && {\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\ninterface IIndividualProductReduxProps {\r\n    selectedProduct: IProduct | null;\r\n}\r\n\r\nfunction IndividualProduct(props: IIndividualProductReduxProps): JSX.Element {\r\n    return (\r\n        <ProductContainer>\r\n            <ProductTitle align=\"center\" variant=\"h4\">\r\n                {props.selectedProduct?.productDisplayName_en || props.selectedProduct?.productSubType}\r\n            </ProductTitle>\r\n            <ProductImage src={props.selectedProduct?.images[0]} alt={props.selectedProduct?.productDisplayName_en} />\r\n            <ProductInfoContainer>\r\n                <ProductInfoColumn>\r\n                    <ProductInfoTitle variant=\"body1\">Brand:</ProductInfoTitle>\r\n                    <ProductInfoTitle variant=\"body1\">Product Type:</ProductInfoTitle>\r\n                    <ProductInfoTitle variant=\"body1\">Product Sub Type:</ProductInfoTitle>\r\n                    <ProductInfoTitle variant=\"body1\">Series:</ProductInfoTitle>\r\n                    <ProductInfoTitle variant=\"body1\">Stock:</ProductInfoTitle>\r\n                    <ProductInfoTitle variant=\"body1\">Product No:</ProductInfoTitle>\r\n                </ProductInfoColumn>\r\n                <ProductInfoColumn>\r\n                    <Typography variant=\"body1\">{props.selectedProduct?.brand}</Typography>\r\n                    <Typography variant=\"body1\">{props.selectedProduct?.productType}</Typography>\r\n                    <Typography variant=\"body1\">{props.selectedProduct?.productSubType}</Typography>\r\n                    <Typography variant=\"body1\">{props.selectedProduct?.series}</Typography>\r\n                    <Typography variant=\"body1\">\r\n                        {props.selectedProduct?.inStock_US_CONSUMER === \"inStock\" ? \"In Stock\" : \"Out of Stock\"}\r\n                    </Typography>\r\n                    <Typography variant=\"body1\">{props.selectedProduct?.productNo}</Typography>\r\n                </ProductInfoColumn>\r\n            </ProductInfoContainer>\r\n        </ProductContainer>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ({ product }: IState): IIndividualProductReduxProps => ({\r\n    selectedProduct: product.selectedProduct,\r\n});\r\n\r\nexport default connect(mapStateToProps)(IndividualProduct);\r\n","import { IconButton } from \"@material-ui/core\";\r\nimport { ArrowBackIos } from \"@material-ui/icons\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { IProduct } from \"../defs/Product\";\r\nimport { PRODUCTS } from \"../defs/routerPaths\";\r\nimport { ProductManager } from \"../managers/ProductManager\";\r\nimport IndividualProduct from \"../components/IndividualProduct\";\r\nimport { setSelectedProduct } from \"../store/products/productActions\";\r\n\r\nconst ScreenContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    max-width: 1350px;\r\n`;\r\n\r\nconst BackButton = styled(IconButton)`\r\n    && {\r\n        margin-top: 15px;\r\n        margin-left: 1vw;\r\n        align-self: flex-start;\r\n    }\r\n`;\r\n\r\ninterface IIndividualItemScreenRouterProps {\r\n    match: {\r\n        params: {\r\n            productNo: string;\r\n        };\r\n    };\r\n}\r\n\r\ninterface IIndividualItemScreenDispatchProps {\r\n    setSelectedProduct: (product: IProduct | null) => void;\r\n}\r\n\r\ntype TIndividualItemScreenAllProps = IIndividualItemScreenRouterProps & IIndividualItemScreenDispatchProps;\r\n\r\nfunction IndividualItemScreen(props: TIndividualItemScreenAllProps): JSX.Element {\r\n    const [nextScreen, setNextScreen] = useState<{ screenName: string; push: boolean } | null>(null);\r\n\r\n    console.log(props);\r\n\r\n    const getSelectedProduct = (): void => {\r\n        const product = ProductManager.getIndividualProduct(props.match.params.productNo);\r\n        if (product !== undefined) {\r\n            props.setSelectedProduct(product);\r\n        } else {\r\n            setNextScreen({ screenName: PRODUCTS, push: false });\r\n        }\r\n    };\r\n    useEffect(getSelectedProduct, [props.match.params.productNo]);\r\n\r\n    if (nextScreen !== null) {\r\n        return <Redirect push={nextScreen.push} to={nextScreen.screenName} />;\r\n    }\r\n\r\n    return (\r\n        <ScreenContainer>\r\n            <BackButton onClick={(): void => setNextScreen({ screenName: PRODUCTS, push: true })}>\r\n                <ArrowBackIos />\r\n            </BackButton>\r\n            <IndividualProduct />\r\n        </ScreenContainer>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    setSelectedProduct,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(IndividualItemScreen);\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Colors } from \"../defs/Colors\";\r\nimport { Drawer, IconButton } from \"@material-ui/core\";\r\nimport { Close, Menu } from \"@material-ui/icons\";\r\nimport ProductFilter from \"./ProductFilter\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { PRODUCTS } from \"../defs/routerPaths\";\r\nimport { IProduct } from \"../defs/Product\";\r\nimport IState from \"../store/state\";\r\nimport { connect } from \"react-redux\";\r\nimport FenderLogo from \"../resources/FenderLogo.svg\";\r\n\r\nconst HeaderContainer = styled.div`\r\n    height: 60px;\r\n    max-height: 60px;\r\n    min-height: 60px;\r\n    padding: 0 3vw;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    box-shadow: ${Colors.header.boxShadow} 0 0 0.625rem 0;\r\n`;\r\n\r\nconst Icon = styled(IconButton)`\r\n    && {\r\n        visibility: collapse;\r\n        color: ${Colors.primary};\r\n\r\n        @media only screen and (max-width: 1315px) {\r\n            visibility: visible;\r\n        }\r\n    }\r\n`;\r\n\r\nconst ExitButton = styled(IconButton)`\r\n    && {\r\n        align-self: flex-end;\r\n        padding: 10px 10px 0 0;\r\n    }\r\n`;\r\n\r\nconst ProductFilterContainer = styled.div`\r\n    padding: 0 15px;\r\n`;\r\n\r\nconst TextLink = styled(Link)`\r\n    && {\r\n        text-decoration: none;\r\n    }\r\n`;\r\n\r\ninterface IHeaderReduxProps {\r\n    selectedProduct: IProduct | null;\r\n}\r\n\r\nfunction Header(props: IHeaderReduxProps): JSX.Element {\r\n    const [isFilterDrawerOpen, setIsFilterDrawerOpen] = useState<boolean>(false);\r\n\r\n    return (\r\n        <HeaderContainer>\r\n            <TextLink to={PRODUCTS}>\r\n                <img width={150} src={FenderLogo} alt=\"Fender\" />\r\n            </TextLink>\r\n            {props.selectedProduct === null && (\r\n                <Icon onClick={(): void => setIsFilterDrawerOpen(true)}>\r\n                    <Menu />\r\n                </Icon>\r\n            )}\r\n            <Drawer anchor=\"right\" open={isFilterDrawerOpen} onClose={(): void => setIsFilterDrawerOpen(false)}>\r\n                <ExitButton onClick={(): void => setIsFilterDrawerOpen(false)}>\r\n                    <Close />\r\n                </ExitButton>\r\n                <ProductFilterContainer>\r\n                    <ProductFilter drawer />\r\n                </ProductFilterContainer>\r\n            </Drawer>\r\n        </HeaderContainer>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ({ product }: IState): IHeaderReduxProps => ({\r\n    selectedProduct: product.selectedProduct,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Header);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Colors } from \"../defs/Colors\";\r\nimport { Link, Typography } from \"@material-ui/core\";\r\n\r\nconst FooterContainer = styled.div`\r\n    border-top: 1px solid ${Colors.footer.border};\r\n    background-color: ${Colors.footer.background};\r\n    height: 50px;\r\n    min-height: 50px;\r\n    max-height: 50px;\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nexport default function Footer(): JSX.Element {\r\n    return (\r\n        <FooterContainer>\r\n            <Typography>Dustin Liu&apos;s Front End Exercise</Typography>\r\n            <Link href=\"https://github.com/DustinL96/fender-front-end-test\" target=\"_blank\">\r\n                Source Code\r\n            </Link>\r\n        </FooterContainer>\r\n    );\r\n}\r\n","import * as React from \"react\";\r\nimport { HashRouter, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport { INDIVIDUAL_ITEM, PRODUCTS } from \"../defs/routerPaths\";\r\nimport ProductsScreen from \"../screens/ProductsScreen\";\r\nimport IndividualItemScreen from \"../screens/IndividualItemScreen\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport styled from \"styled-components\";\r\n\r\nconst PageContainer = styled.div`\r\n    flex-grow: 1;\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\nfunction Router(): JSX.Element {\r\n    return (\r\n        <HashRouter basename=\"/\">\r\n            <Header />\r\n            <PageContainer>\r\n                <Switch>\r\n                    <Route path={PRODUCTS} exact component={ProductsScreen} />\r\n                    <Route path={INDIVIDUAL_ITEM} exact component={IndividualItemScreen} />\r\n                    <Redirect to={PRODUCTS} />\r\n                </Switch>\r\n            </PageContainer>\r\n            <Footer />\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport default Router;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport \"./App.css\";\r\nimport Router from \"./components/Router\";\r\n\r\nconst ScreenContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100vh;\r\n`;\r\n\r\nfunction App(): JSX.Element {\r\n    return (\r\n        <ScreenContainer>\r\n            <Router />\r\n        </ScreenContainer>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === \"[::1]\" ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" +\r\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { \"Service-Worker\": \"script\" },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\"No internet connection found. App is running in offline mode.\");\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import {\r\n    CLEAR_ALL_FILTERS,\r\n    CLEAR_PRODUCT_SERIES_FILTERS,\r\n    CLEAR_PRODUCT_TYPE_FILTERS,\r\n    SET_SELECTED_PRODUCT,\r\n    TGenericProductsAction,\r\n    TOGGLE_PRODUCT_SERIES,\r\n    TOGGLE_PRODUCT_TYPE,\r\n} from \"./productTypes\";\r\nimport { IProductState } from \"../state\";\r\n\r\nconst DEFAULT_PRODUCT_STORE: IProductState = {\r\n    selectedProductSeries: [],\r\n    selectedProductTypes: [],\r\n    selectedProduct: null,\r\n};\r\n\r\nfunction productReducer(state: IProductState = DEFAULT_PRODUCT_STORE, action: TGenericProductsAction): IProductState {\r\n    switch (action.type) {\r\n        case TOGGLE_PRODUCT_TYPE: {\r\n            if (action.toggle) {\r\n                return { ...state, selectedProductTypes: [...state.selectedProductTypes, action.productType] };\r\n            }\r\n            const typeIndex = state.selectedProductTypes.indexOf(action.productType);\r\n            return {\r\n                ...state,\r\n                selectedProductTypes: [\r\n                    ...state.selectedProductTypes.slice(0, typeIndex),\r\n                    ...state.selectedProductTypes.slice(typeIndex + 1),\r\n                ],\r\n            };\r\n        }\r\n\r\n        case TOGGLE_PRODUCT_SERIES: {\r\n            if (action.toggle) {\r\n                return { ...state, selectedProductSeries: [...state.selectedProductSeries, action.productSeries] };\r\n            }\r\n            const seriesIndex = state.selectedProductSeries.indexOf(action.productSeries);\r\n            return {\r\n                ...state,\r\n                selectedProductSeries: [\r\n                    ...state.selectedProductSeries.slice(0, seriesIndex),\r\n                    ...state.selectedProductSeries.slice(seriesIndex + 1),\r\n                ],\r\n            };\r\n        }\r\n\r\n        case SET_SELECTED_PRODUCT: {\r\n            return { ...state, selectedProduct: action.product };\r\n        }\r\n\r\n        case CLEAR_PRODUCT_SERIES_FILTERS: {\r\n            return { ...state, selectedProductSeries: [] };\r\n        }\r\n\r\n        case CLEAR_PRODUCT_TYPE_FILTERS: {\r\n            return { ...state, selectedProductTypes: [] };\r\n        }\r\n\r\n        case CLEAR_ALL_FILTERS: {\r\n            return { ...state, selectedProductTypes: [], selectedProductSeries: [] };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default productReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport productReducer from \"./products/productReducer\";\r\n\r\nconst rootReducer = combineReducers({ product: productReducer });\r\n\r\nexport default rootReducer;\r\n","import { applyMiddleware, createStore, Store } from \"redux\";\r\nimport logger from \"redux-logger\";\r\n\r\nimport rootReducer from \"./reducers\";\r\n\r\nfunction configureStore(): Store {\r\n    return createStore(rootReducer, applyMiddleware(logger));\r\n}\r\n\r\nexport default configureStore;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport configureStore from \"./store/configureStore\";\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById(\"root\"),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}